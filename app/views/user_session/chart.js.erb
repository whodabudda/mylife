
<%   require_dependency('h_s_chart_mgr') %>
<%   require_dependency('h_s_series') %>
<% if false %>
<%=  Rails.logger.info "We made it into the chart.js-erb file" %>
<%=  Rails.logger.info "Chart name is: #{ @chart_mgr.chart_title_text} " %>
<%=  Rails.logger.info HSSeries.new().write %>
<%  end %>
  /*
Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a human readable date string. The available format keys are listed below. Additional formats can be given in the Highcharts.dateFormats hook.
    %a: Short weekday, like 'Mon'
    %A: Long weekday, like 'Monday'
    %d: Two digit day of the month, 01 to 31
    %e: Day of the month, 1 through 31
    %w: Day of the week, 0 through 6
    %b: Short month, like 'Jan'
    %B: Long month, like 'January'
    %m: Two digit month number, 01 through 12
    %y: Two digits year, like 09 for 2009
    %Y: Four digits year, like 2009
    %H: Two digits hours in 24h format, 00 through 23
    %k: Hours in 24h format, 0 through 23
    %I: Two digits hours in 12h format, 00 through 11
    %l: Hours in 12h format, 1 through 12
    %M: Two digits minutes, 00 through 59
    %p: Upper case AM or PM
    %P: Lower case AM or PM
    %S: Two digits seconds, 00 through 59
    %L: Milliseconds (naming from Ruby)
*/
      var chart1; // globally available
      var prev_days; // globally available
      //
      //function to format date as the number of weeks from the beginning of the year
      //
      Highcharts.dateFormats.W = function (timestamp) {
        var date = new Date(timestamp)
        var weeks = Math.floor(
          (
          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) 
           - Date.UTC(date.getFullYear(), 0, 0)
          ) 
           / (24* 60 * 60 * 1000) //milliseconds in a day
           / 7                    //seven days in a week
        );  //end Math.floor
        return weeks;
      };

      Highcharts.dateFormats.Days = function (timestamp) {
        var date = new Date(timestamp)
 
        var days = Math.floor(
          (
          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) 
           - Date.UTC(date.getFullYear(), 0, 0)
          ) 
           / (24* 60 * 60 * 1000) //milliseconds in a day
                               //seven days in a week
        );  //end Math.floor
        return days;
      };

      Highcharts.dateFormats.x = function (timestamp) {
        var date = new Date(timestamp)
 
        return (date.getMonth()+1) + "-" + date.getDate() + "-" + date.getFullYear();
      };

$(function () {
      chart1 = Highcharts.chart('highchart_mychart', {

        plotOptions: {
        scatter: {
        // shared options for all scatter series
        marker: {
            symbol: "triangle",
            enabled: true, 
            radius: 6, 
//            height: 20,
//            width: 30
           } 
        },

        line: {
        marker: {
            symbol: "circle",
            enabled: true, 
            radius: 3, 
//            height: 20,
//            width: 30
           },
        },
        series: {
          events: {
           legendItemClick(e) {
             e.preventDefault();
             console.log("Plotoptions evt: ", e);
             //
             //Almost all the data for the legend item selected will be in the event attribute
             //named <event>.target.userOptions
             //
             let metric_name = e.target.userOptions.name
             console.log("Plotoptions series name: ", metric_name);
             //alert("chart plotOptions")
             let chart = this.chart;
             //console.log("event this: ", this);
             //console.log("event chart: ", chart);

             //
             //TODO - probably don't really have to loop through the series since we have the name
             //of the one that was actually clicked, but it evolved this way
             //and its working.  May refactor later.
             //
             chart.series.forEach(s => {
                 console.log("event series: ", s);
                 if (s.name == metric_name) {
                    data = { name: s.name}
                    //csrfToken = document.querySelector("[name='csrf-token']")
                    csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
                    fetch("toggle_metric_visible", {
                        method: 'POST',
                        headers:  {
                          "X-CSRF-Token": csrfToken,
                          "Content-Type": "application/json",
                          "Accept": "application/json"
                        },
                        body: JSON.stringify(data)
                      });
                    //
                    //capturing the event can stop Highcharts internal processing of the event. Therefore,
                    //explicitly toggle the series display.
                    //
                    if (s.visible) {
                        s.hide();
                    }
                    else {
                        s.show();
                    }
                     // s.hide();
                     // } else {
                     // s.show();
                 }
             })
           }
         }  //events
        },  //series
        }, //plotoptions

        chart: {
         zoomType: 'xy',  //zoom both axis
         panning: true,   //allow user to scroll horizontally using the shift key
         panKey: 'shift',
         alignTicks: false,
         marginLeft: 40,  // Keep all charts left aligned
         spacingTop: 20,
         spacingBottom: 20,
         maxZoom: 5 * 24 * 3600000,
         renderTo: "highchart_mychart",
         /*
        events: {
          load: function() {
           //alert("Chart load event");
           document.querySelector("#mychartlabel").innerHTML = `Load event fired`
            },
           legendItemClick: function(event) {
            alert("Chart legend event:");
            },
          render: function() {
           alert("Chart render event");
           let series = this.series, count = 0;
                    
           series.forEach(serie => {
            if (serie.visible) {
             count++
            }
           })
           document.querySelector("#mychartlabel").innerHTML = `Total visible series: ${series}`
          }
      },
*/
        },
        rangeSelector: {  //the from/to date input fields that set xdata range
          //selected: 1,
          enabled: true,
          allButtonsEnabled: true,
          inputEnabled: true
        },

        tooltip: {
          crosshairs: true,
          shared: false,
          formatter: function() {
//            var line1 = Highcharts.dateFormat('%a, %b %e, %H:%M/%Y', new Date(this.point.x));
            var line1 = Highcharts.dateFormat('%a, %b %e %Y %H:%M', new Date(this.point.x));
            line1 += (' <br>' + this.series.name);
//            if (this.point.y > 0) {
 //           } else {
  //          }
            
            if(typeof this.point.myData !== "undefined") {
              return  line1  + '<b>:' + this.point.myData + '</b>';
            }else {
              line1 += ('<br>Value: ' + this.point.y );
            }
            return line1;       
          } //formatter function
        },  //tooltip
          
        title: {
            text: '<%="#{@chart_mgr.user_name}'s"%> Biometric Chart' 
        },
        xAxis: {
         labels:
	       {
		      formatter: function() {
             //   Highcharts.each(this.series[0].points, function(point) {
             //       if (point.x === timestamp) {
             //           console.log("Formatter y value: " + point.y)
             //         }
             //   });

                //console.log(this)
                //console.log(this.chart.series[0].data[0])
                //console.log("Formatter x:" + chart1.series[0].data[0].x + " y:" + chart1.series[0].data[0].y)
                /*
                days = Highcharts.dateFormat('%Days', this.value)
                console.log("Labels Formatter prev_days: " + prev_days + " new days: " + days + " y: " +
               //   this.chart)
               //  this.chart.series[0].) 
                Object.getOwnPropertyNames(this.chart) )
                if (prev_days !=  days) {
                  prev_days = days
                  return Highcharts.dateFormat('%x', this.value);
                }
                else {
                  return null;
                }
                */
                return Highcharts.dateFormat('%x', this.value);
		        },  //end formatter function
          rotation: -30, //put a 30 degree slant on the xaxis labels
          allowOverlap: false
                //todo: breaks don't seem to work.  leave them off for now
//              breaks: [{ 
//                from: 1587772800000,
//                to: 1618667200000,
//                breakSize: (24* 60 * 60 * 1000 * 30)
//              }
//              {
//                from: 1587772800000,
//                to: 1618667200000,
//               breakSize: (24* 60 * 60 * 1000)
//              }
//              ]

	        }, //end xaxis.labels
//        events: {
//          setExtremes: mysetExtremes
//        },
//        events: {
//          setExtremes: function()
//          {
//             chart1.xAxis[0].setExtremes(
//                        Date.UTC(2021,3,1),
//                        Date.UTC(2021,7.14)
//          );
            //chart1.xAxis[0].min = Date.UTC(2021,3,1)
            ////chart1.xAxis[0].max = Date.UTC(2021,3,14)

//          console.log("setExtremes: " + chart1.series[0].xAxis.min)
//          console.log("setExtremes: " + chart1.series[0].xAxis.max)
//          }
//         },
          zoomEnabled: true,
//          events: {
//            setExtremes: syncExtremes
//           },
          type: 'datetime',
          tickAmount: 10,
          minorTicks: true,
          minorTickInterval: 0.1,
          minorTickColor: '#003b46',
          minorTickPosition: 'outside',
          minorTickWidth: 5,
          minorGridlineWidth: 0,
//          minTickInterval: 20,
          crosshair: true,
        }, //xaxis
        yAxis: [ 
           {
            id: "metrics",
            minRange: 0,
            maxRange: 300,
            title: {
                text: 'Numeric Series'
            },
           },
           {
            id: "events",
            type: "category",
            alignTicks: false,
            minRange: -3,
            maxRange: 3,
            labels: {
              align: "center"
            },
            title: {
                text: 'Std Dev'
            },
//            categories: ["low","med","high"],
            opposite: true,
            plotBands: [
            {
                color: '#dec7b6' ,
                from: 2,
                to: 3
            } ,
            {
                color: '#ded9b6' ,
                from: 1,
                to: 2
            } ,
            {
                color: '#ecf5e6' ,
                from: -1,
                to: 1
            },
            {
                color: '#ded9b6' ,
                from: -1,
                to: -2
            },
            {
                color: '#dec7b6' ,
                from: -2,
                to: -3
            },
            ]
          },
        ],  //yaxis

        
      	legend: {
        	enabled: true
      	},
//		dataGrouping: {	
//          approximation: function (groupData) {
//             console.log("returning groupData: " + groupData[0]) ; return groupData[0]; }}
//      	     navigator: {
//            		enabled: true
//	           },
        //define series in the chart options first as an empty array, then add each series 
        //as an array element from the JSON datasets
        series: []
    });   //highchart mychart

//  var chartdata = '{"datasets": [{"name": "BP", "data": [[1576839400000 ,150],[1576925800000 ,160], [1577012200000 ,140], [1577098600000 ,120], [1577185000000 ,140], [1577271400000 ,170], [1577357800000 ,160], [1593212200000 ,150], [ 1593298600000,110], [1593385000000 ,130]], "unit": "mm", "type": "line", "valueDecimals": 0 }, {"name": "Blood Sugar", "data":[ [1546839500000 ,95], [1546925900000  ,96], [1577012300000 ,94], [1577098600000 ,100], [1577185000000 ,140], [1577271300000 ,89], [1577357700000 ,90], [1577444400000 ,150], [1577530600000 ,110], [1577616000000 ,130]], "unit": "u/ml", "type": "line", "valueDecimals": 0 }, {"name": "Run", "data":[[1576839300000 ,1], [1576925800000 ,2], [1577012300000 ,3], [1577098600000 ,-3]], "unit": "min", "type": "scatter","yAxis": "events", "valueDecimals": 0 },{"name": "Na","data": [{"x": 1576925800000,"y": 1, "myData": "boohoo"},{"x":1577012300000,"y":-2},{"x":1577098600000,"y": 3, "myData": "boohoo2"}],"yAxis": "events","type": "scatter", "marker": {"enabled": true, "radius": 15 } }]}'

    // chart1.addSeries(activity)   
    // console.log("On Dataset series: " i )

    //console.log("Array Length: " )
    //
    //chart_mgr.all_series returns an array of HSSeries objects
    //loop through this array.
    //  HSSeries.write will create a hash of the values for the series
    //  parse hash into JSON and add it to Highcharts as a series
    //
    <% @chart_mgr.all_series.each do |ser| %>

        var series = JSON.parse('<%= raw ser.write.to_json %>')
        console.log(series)
        chart1.addSeries(series)
    <%end%>

    //
    //adds the series to the chart, along with all series options
    //the options are different for events vs metrics.  
    //Events are charted as STD DEV points in a scatter graph, but the actual values are 
    //included as data and displayed in the Tooltip
    //

});  //function

//window.onsvgload(function() )	
//$("text").on( "click", function() {
//  console.log( "This is my very own CUSTOM log output" );
//  console.log( $( this ).text() );
//});



/****************************************************************
 * Snippets of code no longer needed
 ***************************************************************/

/* In order to synchronize tooltips and crosshairs, override the
 * built-in events with handlers defined on the parent element. */
/*
['mousemove', 'touchmove', 'touchstart'].forEach(function (eventType) {
    document.getElementById('highchart_mychart').addEventListener(
        eventType,
        function (e) {
            var chart,
                point,
                i,
                event;

            for (i = 0; i < Highcharts.charts.length; i = i + 1) {
                chart = Highcharts.charts[i];
                // Find coordinates within the chart
                event = chart.pointer.normalize(e);
                // Get the hovered point
                point = chart.series[0].searchPoint(event, true);

                if (point) {
                    point.highlight(e);
                }
            }
        }
    );
});
 */
/**
 * Override the reset function, we don't need to hide the tooltips and
 * crosshairs.
Highcharts.Pointer.prototype.reset = function () {
    return undefined;
};
 */
/**
 * Highlight a point by showing tooltip, setting hover state and draw crosshair
Highcharts.Point.prototype.highlight = function (event) {
    event = this.series.chart.pointer.normalize(event);
    this.onMouseOver(); // Show the hover marker
    this.series.chart.tooltip.refresh(this); // Show the tooltip
    this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
};
 */

/**
 * Synchronize zooming through the setExtremes event handler.
function syncExtremes(e) {
    var thisChart = this.chart;

    if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
        Highcharts.each(Highcharts.charts, function (chart) {
            if (chart !== thisChart) {
                if (chart.xAxis[0].setExtremes) { // It is null while updating
                    chart.xAxis[0].setExtremes(
                        e.min,
                        e.max,
                        undefined,
                        false,
                        { trigger: 'syncExtremes' }
                    );
                }
            }
        });
    }
}
 */
  /**
//document.addEventListener('click', checkSeries(event) {
function  checkSeries (e) {
  var chart1 = this.chart;
  var event = e;
  console.log(event.target);
  console.log(event.target.innerHTML);
  if (chart1.series.some(e => e.name === event.target.innerHTML)) {
    console.log( event.target.innerHTML + " is a series" );
  }
  if (event.target.closest('text')  && chart1.series.some(e => e.name === event.target.innerHTML)){
    console.log( "This is my very own CUSTOM log output" );
    console.log('length is: ' + chart1.series.length);
    for ( var i = 0; i < chart1.series.length; i++) {
            console.log(chart1.series[i].name + ' : ' + chart1.series[i].visible);
    }
   }
//    chart1.series.each( function(s) {
 //         if (!s.visible) {
  //          console.log(s.name + ' is not visible!');
   //       }
    //    });
};
//},false);

    //loop through the data and build the chart.  Each dataset is a series.

      /*
      //This set of code creates a new chart for each dataset.
      //Instead, create one chart with multiple datasets as series.
      //The foreach loop will need to encompass all the highcharts api calls
      activity.datasets.forEach(function (dataset, i) {
        console.log("On Dataset series: " + dataset.name)
        // Add X values
        dataset.data = Highcharts.map(dataset.data, function (val, j) {
          return [activity.xData[j], val];
        });
        var chartDiv = document.createElement('div');
        chartDiv.className = 'chart';
        document.getElementById('highchart_mychart').appendChild(chartDiv);

        Highcharts.chart(chartDiv, {
        //remainder of highcharts api setup to be done in a loop for each chart
        })  //end highcharts.chart
      })  //end datasets.forEach

function mysetExtremes(e){
    chart1 = this.chart
    console.log("mysetExtremes: " + chart.series[0].xAxis.min)
    console.log("mysetExtremes: " + chart.series[0].xAxis.max)
};
*/
document.getElementById('button').addEventListener('click', () => {
    var fromdt = document.getElementById('chart_fromdate').value
    var todt = document.getElementById('chart_todate').value
    console.log("setExtremes: " + fromdt + " :" + todt)
    chart1.series[0].xAxis.setExtremes(Date.parse(fromdt), Date.parse(todt)); 
//    chart1.series[0].xAxis.setExtremes(Date.parse('01 Dec 2019 00:00:00 GMT'), Date.parse('01 Feb 2020 00:00:00 GMT')); 
    console.log("setExtremes: " + chart1.series[0].xAxis.min)
    console.log("setExtremes: " + chart1.series[0].xAxis.max)
});

